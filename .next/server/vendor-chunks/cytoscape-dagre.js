/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cytoscape-dagre";
exports.ids = ["vendor-chunks/cytoscape-dagre"];
exports.modules = {

/***/ "(ssr)/./node_modules/cytoscape-dagre/cytoscape-dagre.js":
/*!*********************************************************!*\
  !*** ./node_modules/cytoscape-dagre/cytoscape-dagre.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! dagre */ \"(ssr)/./node_modules/dagre/index.js\"));\n\telse {}\n})(this, function(__WEBPACK_EXTERNAL_MODULE__4__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_633__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_633__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__nested_webpack_require_633__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__nested_webpack_require_633__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__nested_webpack_require_633__.d = function(exports, name, getter) {\n/******/ \t\tif(!__nested_webpack_require_633__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__nested_webpack_require_633__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__nested_webpack_require_633__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __nested_webpack_require_633__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__nested_webpack_require_633__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __nested_webpack_require_633__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__nested_webpack_require_633__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__nested_webpack_require_633__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__nested_webpack_require_633__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__nested_webpack_require_633__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __nested_webpack_require_633__(__nested_webpack_require_633__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __nested_webpack_require_4097__) {\n\nvar impl = __nested_webpack_require_4097__(1); // registers the extension on a cytoscape lib ref\n\n\nvar register = function register(cytoscape) {\n  if (!cytoscape) {\n    return;\n  } // can't register if cytoscape unspecified\n\n\n  cytoscape('layout', 'dagre', impl); // register with cytoscape.js\n};\n\nif (typeof cytoscape !== 'undefined') {\n  // expose to global cytoscape (i.e. window.cytoscape)\n  register(cytoscape);\n}\n\nmodule.exports = register;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __nested_webpack_require_4608__) {\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar isFunction = function isFunction(o) {\n  return typeof o === 'function';\n};\n\nvar defaults = __nested_webpack_require_4608__(2);\n\nvar assign = __nested_webpack_require_4608__(3);\n\nvar dagre = __nested_webpack_require_4608__(4); // constructor\n// options : object containing layout options\n\n\nfunction DagreLayout(options) {\n  this.options = assign({}, defaults, options);\n} // runs the layout\n\n\nDagreLayout.prototype.run = function () {\n  var options = this.options;\n  var layout = this;\n  var cy = options.cy; // cy is automatically populated for us in the constructor\n\n  var eles = options.eles;\n\n  var getVal = function getVal(ele, val) {\n    return isFunction(val) ? val.apply(ele, [ele]) : val;\n  };\n\n  var bb = options.boundingBox || {\n    x1: 0,\n    y1: 0,\n    w: cy.width(),\n    h: cy.height()\n  };\n\n  if (bb.x2 === undefined) {\n    bb.x2 = bb.x1 + bb.w;\n  }\n\n  if (bb.w === undefined) {\n    bb.w = bb.x2 - bb.x1;\n  }\n\n  if (bb.y2 === undefined) {\n    bb.y2 = bb.y1 + bb.h;\n  }\n\n  if (bb.h === undefined) {\n    bb.h = bb.y2 - bb.y1;\n  }\n\n  var g = new dagre.graphlib.Graph({\n    multigraph: true,\n    compound: true\n  });\n  var gObj = {};\n\n  var setGObj = function setGObj(name, val) {\n    if (val != null) {\n      gObj[name] = val;\n    }\n  };\n\n  setGObj('nodesep', options.nodeSep);\n  setGObj('edgesep', options.edgeSep);\n  setGObj('ranksep', options.rankSep);\n  setGObj('rankdir', options.rankDir);\n  setGObj('align', options.align);\n  setGObj('ranker', options.ranker);\n  setGObj('acyclicer', options.acyclicer);\n  g.setGraph(gObj);\n  g.setDefaultEdgeLabel(function () {\n    return {};\n  });\n  g.setDefaultNodeLabel(function () {\n    return {};\n  }); // add nodes to dagre\n\n  var nodes = eles.nodes();\n\n  if (isFunction(options.sort)) {\n    nodes = nodes.sort(options.sort);\n  }\n\n  for (var i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n    var nbb = node.layoutDimensions(options);\n    g.setNode(node.id(), {\n      width: nbb.w,\n      height: nbb.h,\n      name: node.id()\n    }); // console.log( g.node(node.id()) );\n  } // set compound parents\n\n\n  for (var _i = 0; _i < nodes.length; _i++) {\n    var _node = nodes[_i];\n\n    if (_node.isChild()) {\n      g.setParent(_node.id(), _node.parent().id());\n    }\n  } // add edges to dagre\n\n\n  var edges = eles.edges().stdFilter(function (edge) {\n    return !edge.source().isParent() && !edge.target().isParent(); // dagre can't handle edges on compound nodes\n  });\n\n  if (isFunction(options.sort)) {\n    edges = edges.sort(options.sort);\n  }\n\n  for (var _i2 = 0; _i2 < edges.length; _i2++) {\n    var edge = edges[_i2];\n    g.setEdge(edge.source().id(), edge.target().id(), {\n      minlen: getVal(edge, options.minLen),\n      weight: getVal(edge, options.edgeWeight),\n      name: edge.id()\n    }, edge.id()); // console.log( g.edge(edge.source().id(), edge.target().id(), edge.id()) );\n  }\n\n  dagre.layout(g);\n  var gNodeIds = g.nodes();\n\n  for (var _i3 = 0; _i3 < gNodeIds.length; _i3++) {\n    var id = gNodeIds[_i3];\n    var n = g.node(id);\n    cy.getElementById(id).scratch().dagre = n;\n  }\n\n  var dagreBB;\n\n  if (options.boundingBox) {\n    dagreBB = {\n      x1: Infinity,\n      x2: -Infinity,\n      y1: Infinity,\n      y2: -Infinity\n    };\n    nodes.forEach(function (node) {\n      var dModel = node.scratch().dagre;\n      dagreBB.x1 = Math.min(dagreBB.x1, dModel.x);\n      dagreBB.x2 = Math.max(dagreBB.x2, dModel.x);\n      dagreBB.y1 = Math.min(dagreBB.y1, dModel.y);\n      dagreBB.y2 = Math.max(dagreBB.y2, dModel.y);\n    });\n    dagreBB.w = dagreBB.x2 - dagreBB.x1;\n    dagreBB.h = dagreBB.y2 - dagreBB.y1;\n  } else {\n    dagreBB = bb;\n  }\n\n  var constrainPos = function constrainPos(p) {\n    if (options.boundingBox) {\n      var xPct = dagreBB.w === 0 ? 0 : (p.x - dagreBB.x1) / dagreBB.w;\n      var yPct = dagreBB.h === 0 ? 0 : (p.y - dagreBB.y1) / dagreBB.h;\n      return {\n        x: bb.x1 + xPct * bb.w,\n        y: bb.y1 + yPct * bb.h\n      };\n    } else {\n      return p;\n    }\n  };\n\n  nodes.layoutPositions(layout, options, function (ele) {\n    ele = _typeof(ele) === \"object\" ? ele : this;\n    var dModel = ele.scratch().dagre;\n    return constrainPos({\n      x: dModel.x,\n      y: dModel.y\n    });\n  });\n  return this; // chaining\n};\n\nmodule.exports = DagreLayout;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\nvar defaults = {\n  // dagre algo options, uses default value on undefined\n  nodeSep: undefined,\n  // the separation between adjacent nodes in the same rank\n  edgeSep: undefined,\n  // the separation between adjacent edges in the same rank\n  rankSep: undefined,\n  // the separation between adjacent nodes in the same rank\n  rankDir: undefined,\n  // 'TB' for top to bottom flow, 'LR' for left to right,\n  align: undefined,\n  // alignment for rank nodes. Can be 'UL', 'UR', 'DL', or 'DR', where U = up, D = down, L = left, and R = right\n  acyclicer: undefined,\n  // If set to 'greedy', uses a greedy heuristic for finding a feedback arc set for a graph.\n  // A feedback arc set is a set of edges that can be removed to make a graph acyclic.\n  ranker: undefined,\n  // Type of algorithm to assigns a rank to each node in the input graph.\n  // Possible values: network-simplex, tight-tree or longest-path\n  minLen: function minLen(edge) {\n    return 1;\n  },\n  // number of ranks to keep between the source and target of the edge\n  edgeWeight: function edgeWeight(edge) {\n    return 1;\n  },\n  // higher weight edges are generally made shorter and straighter than lower weight edges\n  // general layout options\n  fit: true,\n  // whether to fit to viewport\n  padding: 30,\n  // fit padding\n  spacingFactor: undefined,\n  // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up\n  nodeDimensionsIncludeLabels: false,\n  // whether labels should be included in determining the space used by a node\n  animate: false,\n  // whether to transition the node positions\n  animateFilter: function animateFilter(node, i) {\n    return true;\n  },\n  // whether to animate specific nodes when animation is on; non-animated nodes immediately go to their final positions\n  animationDuration: 500,\n  // duration of animation in ms if enabled\n  animationEasing: undefined,\n  // easing of animation if enabled\n  boundingBox: undefined,\n  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n  transform: function transform(node, pos) {\n    return pos;\n  },\n  // a function that applies a transform to the final node position\n  ready: function ready() {},\n  // on layoutready\n  sort: undefined,\n  // a sorting function to order the nodes and edges; e.g. function(a, b){ return a.data('weight') - b.data('weight') }\n  // because cytoscape dagre creates a directed graph, and directed graphs use the node order as a tie breaker when\n  // defining the topology of a graph, this sort function can help ensure the correct order of the nodes/edges.\n  // this feature is most useful when adding and removing the same nodes and edges multiple times in a graph.\n  stop: function stop() {} // on layoutstop\n\n};\nmodule.exports = defaults;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n// Simple, internal Object.assign() polyfill for options objects etc.\nmodule.exports = Object.assign != null ? Object.assign.bind(Object) : function (tgt) {\n  for (var _len = arguments.length, srcs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    srcs[_key - 1] = arguments[_key];\n  }\n\n  srcs.forEach(function (src) {\n    Object.keys(src).forEach(function (k) {\n      return tgt[k] = src[k];\n    });\n  });\n  return tgt;\n};\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__4__;\n\n/***/ })\n/******/ ]);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cytoscape-dagre/cytoscape-dagre.js\n");

/***/ })

};
;